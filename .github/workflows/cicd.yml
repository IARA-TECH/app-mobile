name: Android CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    name: Build & Generate APK
    runs-on: ubuntu-latest

    env:
      GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache do Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Permitir execução do Gradle
        run: chmod +x ./gradlew

      - name: Criar arquivo google-services.json
        run: |
          mkdir -p app/src/debug
          printf '%s' "$GOOGLE_SERVICES_JSON" > app/google-services.json
          printf '%s' "$GOOGLE_SERVICES_JSON" > app/src/debug/google-services.json
          echo "Arquivo google-services.json criado com sucesso."

      - name: Build do APK
        run: ./gradlew assembleDebug

      - name: Upload do APK (artefato)
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: app/build/outputs/apk/debug/app-debug.apk

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build da imagem Docker (opcional)
        run: |
          docker build -t $DOCKER_USERNAME/app-mobile:latest .
          docker push $DOCKER_USERNAME/app-mobile:latest

  deploy:
    name: Deploy automático (simples)
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Baixar o artefato gerado
        uses: actions/download-artifact@v4
        with:
          name: app-debug

      - name: Verificar e listar APK
        run: |
          echo "Arquivo gerado com sucesso:"
          ls -lh app-debug.apk
          echo "Build concluído e APK disponível nos artefatos da pipeline!"
